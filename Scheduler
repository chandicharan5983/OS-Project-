#include<stdio.h> 
#include<conio.h>
void thirdIteration(int num,int rem_time[10],int current_time,int arr_time[10], int burst_time[10])
{
	float averagewt,averagetut;
	int i,j,n=num,temp,btime[20],pno[20],wtime[20],tutime[20],total=0,loc;
 
	printf("\nThird iteration started...(least burst time)\n");
 
	for(i=0;i<n;i++)
	{
		btime[i]=rem_time[i];
		wtime[i]=current_time-arr_time[i]-btime[i];
		pno[i]=i+1;
	}
	for(i=0;i<n;i++)
	{
		loc=i;
		for(j=i+1;j<n;j++)
		{
			if(btime[j]<btime[loc])
			{
				loc=j;
			}
	 	}
	 	temp=btime[i];
	 	btime[i]=btime[loc];
	 	btime[loc]=temp;
	 	temp=pno[i];
	 	pno[i]=pno[loc];
	 	pno[loc]=temp;
	}
	for(i=1;i<n;i++)
	{
		for(j=0;j<i;j++)
		{
			wtime[i]+=btime[j];
		}
		 	total+=wtime[i];
	}
	averagewt=(float)total/n;
	total=0;
	printf("\nProcess\tBurst time\tWaiting time\tTurnaround Time");
	for(i=0;i<n;i++)
	{
		tutime[i]=btime[i]+wtime[i];
	 	total=total + tutime[i];
	 	printf("\nP%d\t\t\t%d\t\t\t%d\t\t\t%d",pno[i],btime[i],wtime[i],tutime[i]);
	}
	averagetut=(float)total/n;
	printf("\nAverage waiting time of execution = %f",averagewt);
	printf("\nAverage turnaround time of execution = %f\n",averagetut);	
}
int main() 
{
	int pno,j,num,currentTime,remainingProcess,flag,tq,wt,tut,arr_time[10],burst_time[10],rem_time[10],iterator=1;
	flag = 0;
	wt = 0;
	tut = 0;
	printf("Enter number of processes... "); 
	scanf("%d",&num);
	remainingProcess = num;
	
	printf("\nEnter details of the processes\n");
	for(pno = 0;pno < num;pno++) 
	{
		printf("\nProcess P%d\n\t",pno+1);
		printf("Arrival time = "); 
		scanf("%d",&arr_time[pno]);
		printf("\tBurst time = "); 
		scanf("%d",&burst_time[pno]); 
		rem_time[pno]=burst_time[pno]; 
	} 
	
	printf("\nFirst iteration... (time quantum = 3)\n"); 
	tq=3;
	currentTime=0;
	for(pno=0;remainingProcess!=0;) 
	{
		if(rem_time[pno]<=tq && rem_time[pno]>0)
		{ 
			currentTime+=rem_time[pno]; 
			rem_time[pno]=0; 
			flag=1; 
		} 
		else if(rem_time[pno]>0)
		{ 
			rem_time[pno]-=tq; 
			currentTime+=tq; 
		} 
		if(rem_time[pno]==0 && flag==1)
		{ 
			remainingProcess--;
			printf("P%d",pno+1); 
			printf("\t%d",currentTime-arr_time[pno]);
			printf("\t%d\n",currentTime-burst_time[pno]-arr_time[pno]);
			wt+=currentTime-arr_time[pno]-burst_time[pno]; 
			tut+=currentTime-arr_time[pno]; 
			flag=0; 
		} 
		if(pno==num-1)
		{
			iterator++;
			if(iterator==2)
			{
				pno=0;
				tq=6;
				printf("\nFirst iteration completes...");
				printf("\nSecond iteration starts... (time quantum 6)\n\n");
			}
			else
			{
				printf("\n\nSecond iteration completes...");
				break;
			}
		}
		else if(currentTime >= arr_time[pno+1])
		{
			pno++;
		}
		else
		{
			pno=0;
		}
	}
	thirdIteration(num,rem_time,currentTime,arr_time,burst_time);
	return 0;
}
